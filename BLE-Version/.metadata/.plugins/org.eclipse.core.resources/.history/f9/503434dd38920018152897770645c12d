package com.massage.activity;

import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.UUID;

import com.massage.activity.ui.ToggleView;
import com.massage.activity.ui.ToggleView.OnSwitchStateUpdateListener;
import com.massage.adapter.DeviceAdapter;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.Toast;

public class BloothActivity extends Activity{
    private ToggleView toggleViewStatus,toggleViewSearch;
    private ListView bloothList = null;
    private BluetoothAdapter bluetoothAdapter = null;
    private OutputStream mOutputStream;
    private DeviceAdapter mAdapter = null;
    private ArrayList<BluetoothDevice> mDevices = new ArrayList<BluetoothDevice>();//扫描设备列表
    /**
     *广播接收扫描蓝牙信息结果
     */
    private BroadcastReceiver mBlueToothReceiver = new BroadcastReceiver() {
		
		@Override
		public void onReceive(Context context, Intent intent) {
			// TODO Auto-generated method stub
			String action = intent.getAction();
			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
				BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				mDevices.add(device);
				mAdapter.notifyDataSetChanged();
			} else if (BluetoothAdapter.ACTION_DISCOVERY_STARTED.equals(action)) {
				Toast.makeText(getApplicationContext(), "开始扫描", Toast.LENGTH_SHORT).show();

			} else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
				Toast.makeText(getApplicationContext(), "停止扫描", Toast.LENGTH_SHORT).show();
			} 
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_blooth);
		toggleViewStatus = (ToggleView) findViewById(R.id.toggleViewStatus); //蓝牙状态
		toggleViewSearch = (ToggleView) findViewById(R.id.toggleViewSearch); //蓝牙搜索
		bloothList = (ListView) findViewById(R.id.bloothList); //显示蓝牙列表
		mAdapter = new DeviceAdapter(mDevices, getApplicationContext());
	
		bloothList.setAdapter(mAdapter);
		bloothList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				Log.d("test", "点击了");
				System.out.println("点击了");
				Toast.makeText(getApplicationContext(), "点击成功", Toast.LENGTH_SHORT).show();
				BluetoothDevice bluetoothDevice = mDevices.get(position);
				connectDevice(bluetoothDevice);
				
			}
		});
		bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		//注册广播接受者,当扫描到蓝牙设备时候，系统发送广播
		IntentFilter filter = new IntentFilter();
		filter.addAction(BluetoothDevice.ACTION_FOUND);
		filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
		filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		registerReceiver(mBlueToothReceiver, filter);
		toggleViewStatus.setOnSwitchStateUpdateListener(new OnSwitchStateUpdateListener() {
	    @Override
		public void onStateUpdate(boolean state) {
				// TODO Auto-generated method stub
				if (state) { //打开蓝牙
					if (!bluetoothAdapter.isEnabled()) {//蓝牙不可用，则打开蓝牙
						bluetoothAdapter.enable();
					}
					
				} else { // 关闭蓝牙
					if (bluetoothAdapter.isEnabled()) {//蓝牙打开中
						bluetoothAdapter.disable();
					}
				}
			}
		});
		toggleViewSearch.setOnSwitchStateUpdateListener(new OnSwitchStateUpdateListener() {
			
			@Override
			public void onStateUpdate(boolean state) {
				// TODO Auto-generated method stub
				if (state) { //搜索蓝牙,扫描蓝牙设备
					bluetoothAdapter.startDiscovery();
					
				} else { // 关闭
					bluetoothAdapter.cancelDiscovery();
				}
				
			}
		});
	}
	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		unregisterReceiver(mBlueToothReceiver);//解除注册
	}

	private void connectDevice( final BluetoothDevice bluetoothDevice) {
		// TODO Auto-generated method stub
		new Thread(){
			public void run() {
				//链接蓝牙
				try {
					//UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")
					BluetoothSocket bSocket = bluetoothDevice.createRfcommSocketToServiceRecord(UUID.nameUUIDFromBytes((byte)0x88));
				//	BluetoothSocket bSocket =(BluetoothSocket) bluetoothDevice.getClass().getMethod("createRfcommSocket", new Class[] {int.class}).invoke(bluetoothDevice,1);
	          
							//bluetoothDevice.getUuids()[0].getUuid());
					bSocket.connect();//建立连接
					mOutputStream = bSocket.getOutputStream();//获取输出流，向蓝牙服务端写指令
					runOnUiThread(new Runnable() {
						public void run() {
							Log.d("test", "连接成功击了");
							System.out.println("lainjeichegng");
							Toast.makeText(getApplicationContext(), "连接成功", Toast.LENGTH_LONG).show();
						}
					});
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (NoSuchMethodException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			};
		}.start();
	}

}
