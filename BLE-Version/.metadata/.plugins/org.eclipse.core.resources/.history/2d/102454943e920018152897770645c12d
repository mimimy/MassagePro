package com.massage.activity;

import com.example.jdy_ble.DeviceListAdapter;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.widget.ListView;
import android.widget.Toast;

public class BluetoothActivity extends Activity {

    private BluetoothAdapter mBluetoothAdapter;
    private DeviceListAdapter mDevListAdapter;
	ListView lv_bleList;
	private Handler mHandler=  new Handler();
	private byte dev_bid;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_blooth);
        if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {
            Toast.makeText(this, "不支持蓝牙连接", Toast.LENGTH_SHORT).show();
            finish();
        }
        final BluetoothManager bluetoothManager =
                (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
        mBluetoothAdapter = bluetoothManager.getAdapter();

        // Checks if Bluetooth is supported on the device.
        if (mBluetoothAdapter == null) {
            Toast.makeText(this, "蓝牙未连接", Toast.LENGTH_SHORT).show();
            finish();
            return;
        }
        // 如果本地蓝牙没有开启，则开启  
        if (!mBluetoothAdapter.isEnabled()) 
        {
            // 我们通过startActivityForResult()方法发起的Intent将会在onActivityResult()回调方法中获取用户的选择，比如用户单击了Yes开启，  
            // 那么将会收到RESULT_OK的结果，  
            // 如果RESULT_CANCELED则代表用户不愿意开启蓝牙  
            Intent mIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);  
            startActivityForResult(mIntent, 1);  

        }
        
        
        lv_bleList = (ListView) findViewById(R.id.bloothList);
		mDevListAdapter = new DeviceListAdapter( mBluetoothAdapter,BluetoothActivity.this );
		dev_bid = (byte)0x88;
		mDevListAdapter.set_vid( dev_bid );//用于识别自家的VID相同的设备，只有模块的VID与APP的VID相同才会被搜索得到
		lv_bleList.setAdapter( mDevListAdapter.init_adapter( ) );
		lv_bleList.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				if (mDevListAdapter.get_count() > 0) 
				{
					
					
					Byte vid_byte =  mDevListAdapter.get_vid( position );//返回136表示是JDY厂家模块
					//String vid_str =String.format("%02x", vid_byte );
					//Toast.makeText( DeviceScanActivity.this,"设备VID:"+vid_str, Toast.LENGTH_SHORT).show();
//				    Toast.makeText( DeviceScanActivity.this, "type:"+mDevListAdapter.get_item_type(position), Toast.LENGTH_SHORT).show(); 
				}
				
        
				}
				}

}
